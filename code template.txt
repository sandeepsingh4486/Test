i want to create single array making arr[0]= arr1[251],arr[2]= arr2[251] using memcopy(making all elements of array as 1 element of another array 

#include <stdint.h>
#include <stdio.h>

int main() {
    uint8_t arr1[255] = {0x02, 0xF0, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x00, 0x20, 0x00, 0x00, 0x88, 0x23, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x3A, 0x80, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x02, 0x00, 0xFA, 0x00, 0xFA, 0xFF, 0x07, 0x00, 0x00, 0x0F, 0x78, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x24, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x28, 0x00, 0x71, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x2A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x24, 0x00, 0x6B, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x32, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x20, 0x20, 0x00, 0x65, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x3A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x08, 0x20, 0x00, 0x5F, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x42, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x04, 0x20, 0x00, 0x59, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x4A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x01, 0x20, 0x00, 0x53, 0x00, 0x07, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00};
    uint8_t arr2[255] = {0x02, 0xF0, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x78, 0x20, 0x00, 0x00, 0x1E, 0x00, 0x90, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x3D, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00};

    uint8_t arr[2][251];

    // Copy the first 251 elements from arr1 to arr[0]
    for (int i = 0; i < 251; i++) {
        arr[0][i] = arr1[i];
    }

    // Copy the first 251 elements from arr2 to arr[1]
    for (int i = 0; i < 251; i++) {
        arr[1][i] = arr2[i];
    }

    // Print the arrays (for verification)
    for (int i = 0; i < 2; i++) {
        printf("arr[%d]:\n", i);
        for (int j = 0; j < 251; j++) {
            printf("%02X ", arr[i][j]);
        }
        printf("\n");
    }

    return 0;
}
**************************************************************************************************************************************************************************************************************************************************************
#include <stdio.h>
#include <stdint.h>

int main() {
    uint8_t arr1[255] = {0x02, 0xF0, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x00, 0x20, 0x00, 0x00, 0x88, 0x23, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x3A, 0x80, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x02, 0x00, 0xFA, 0x00, 0xFA, 0xFF, 0x07, 0x00, 0x00, 0x0F, 0x78, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x24, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x28, 0x00, 0x71, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x2A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x24, 0x00, 0x6B, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x32, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x20, 0x20, 0x00, 0x65, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x3A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x08, 0x20, 0x00, 0x5F, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x42, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x04, 0x20, 0x00, 0x59, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x4A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x01, 0x20, 0x00, 0x53, 0x00, 0x07, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00};
    uint8_t arr2[255] = {0x02, 0xF0, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x78, 0x20, 0x00, 0x00, 0x1E, 0x00, 0x90, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x3D, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00};

    // Create the 2D array
    uint8_t arr[2][251];

    // Copy the first 251 elements from arr1 and arr2 to arr[0] and arr[1] respectively
    for (int i = 0; i < 251; i++) {
        arr[0][i] = arr1[i];
        arr[1][i] = arr2[i];
    }

    // Print the 2D array
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 251; j++) {
            printf("0x%02X ", arr[i][j]);
        }
        printf("\n");
    }

    return 0;
}
*****************************************************************************************************************************************************************************************************************************************************
#include <stdio.h>
#include <string.h>
#include <stdint.h>

#define SIZE 251

int main() {
    // Define the arrays
  uint8_t arr1[255] = {0x02, 0xF0, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x00, 0x20, 0x00, 0x00, 0x88, 0x23, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x3A, 0x80, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x02, 0x00, 0xFA, 0x00, 0xFA, 0xFF, 0x07, 0x00, 0x00, 0x0F, 0x78, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x24, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x28, 0x00, 0x71, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x2A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x24, 0x00, 0x6B, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x32, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x20, 0x20, 0x00, 0x65, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x3A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x08, 0x20, 0x00, 0x5F, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x42, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x04, 0x20, 0x00, 0x59, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x4A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x01, 0x20, 0x00, 0x53, 0x00, 0x07, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00};
    uint8_t arr2[255] = {0x02, 0xF0, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x78, 0x20, 0x00, 0x00, 0x1E, 0x00, 0x90, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x3D, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00};
    uint8_t arr[2 * SIZE]; // New array to hold elements from arr1 and arr2

    // Copy elements using memcpy
    memcpy(&arr[0], &arr1[255 - SIZE], SIZE);
    memcpy(&arr[SIZE], &arr2[255 - SIZE], SIZE);

    // Print the array to serial (simulation using printf for this example)
    for(int i = 0; i < 2 * SIZE; i++) {
        printf("0x%02X ", arr[i]);
        if ((i + 1) % SIZE == 0) {
            printf("\n"); // New line after each 251 bytes
        }
    }

    return 0;
}
**************************************************************************************************************************************************************************************************************************************************************
i want to create single 2d array[][] making arr[0]= arr1[251],arr[2]= arr2[251] using memcopy(making all elements of array as 1 element of another array 
#include <stdio.h>
#include <stdint.h>
#include <string.h> // For memcpy

#define ARRAY_SIZE 255

int main() {
    uint8_t arr1[255] = {0x02, 0xF0, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x00, 0x20, 0x00, 0x00, 0x88, 0x23, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x3A, 0x80, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x02, 0x00, 0xFA, 0x00, 0xFA, 0xFF, 0x07, 0x00, 0x00, 0x0F, 0x78, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x24, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x28, 0x00, 0x71, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x2A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x24, 0x00, 0x6B, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x32, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x20, 0x20, 0x00, 0x65, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x3A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x08, 0x20, 0x00, 0x5F, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x42, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x04, 0x20, 0x00, 0x59, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x78, 0x00, 0x4A, 0x00, 0x07, 0x00, 0x00, 0x04, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x01, 0x20, 0x00, 0x53, 0x00, 0x07, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00};
uint8_t arr2[255] = {0x02, 0xF0, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x78, 0x20, 0x00, 0x00, 0x1E, 0x00, 0x90, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x3D, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x1E, 0x40, 0x78, 0x00, 0x00, 0x80, 0xFA, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0xFA, 0x00, 0x10, 0x07, 0x98, 0x00, 0x00, 0x40, 0xEB, 0x00, 0x00, 0x4F, 0x78, 0x00, 0x9E, 0x00, 0x90, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x00, 0x32, 0x00, 0x10, 0xC0, 0xB3, 0x00};

    // Define the 2D array
    uint8_t combined[2][ARRAY_SIZE];

    // Copy data from arr1 and arr2 into combined array
    memcpy(combined[0], arr1, ARRAY_SIZE);
    memcpy(combined[1], arr2, ARRAY_SIZE);

    // Example: Print out combined array to verify
    for (int i = 0; i < 2; i++) {
        printf("combined[%d]:\n", i);
        for (int j = 0; j < ARRAY_SIZE; j++) {
            printf("0x%02X ", combined[i][j]);
            //if ((j + 1) % 16 == 0) // Print 16 bytes per line for readability
               // printf("\n");
        }
        printf("\n");
    }

    return 0;
}
*******************************************************************************************************************************
******************************************************************************************************************************
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <unistd.h>  // For sleep function

// Define the arrays
uint8_t arr1[255] = { /* your data */ };
uint8_t arr2[255] = { /* your data */ };
uint8_t arr3[255] = { /* your data */ };
uint8_t arr4[255] = { /* your data */ };

// Number of arrays
#define NUM_ARRAYS 4
#define ARRAY_SIZE 255

// Create a 2D array
uint8_t arr[NUM_ARRAYS][ARRAY_SIZE];

// Function to print an array
void printArray(uint8_t array[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%02X ", array[i]);
    }
    printf("\n");
}

// Function to delay for a certain number of seconds
void delay(int seconds) {
    sleep(seconds);
}

int main() {
    // Copy data into the 2D array
    memcpy(arr[0], arr1, ARRAY_SIZE);
    memcpy(arr[1], arr2, ARRAY_SIZE);
    memcpy(arr[2], arr3, ARRAY_SIZE);
    memcpy(arr[3], arr4, ARRAY_SIZE);

    // Print each array with a 5-second delay
    for (int i = 0; i < NUM_ARRAYS; i++) {
        printArray(arr[i], ARRAY_SIZE);
        delay(5);  // Delay for 5 seconds
    }

    return 0;
}
*******************************************************************************************************************************
i want to create single 2d array[][] making arr[0]= arr1[251],arr[2]= arr2[251], arr[3]= arr3[251],arr[4]= arr4 [251],...upto an[N]=aN[251] using memcopy(making all elements of array as 1 element of another array, print arr[0],delay 5 sec print arr[1],delay 5 sec using  EUSART1_Write(uint8_t txData)
*******************************************************************************************************************************
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <unistd.h>  // For sleep function

// Function prototype for EUSART1_Write
void EUSART1_Write(uint8_t txData);

// Define the arrays
uint8_t arr1[255] = { /* your data here */ };
uint8_t arr2[255] = { /* your data here */ };
uint8_t arr3[255] = { /* your data here */ };
uint8_t arr4[255] = { /* your data here */ };

// Define the 2D array
uint8_t arr[4][251];

// Function to initialize the 2D array
void initialize_2D_array() {
    memcpy(arr[0], arr1, sizeof(arr1));
    memcpy(arr[1], arr2, sizeof(arr2));
    memcpy(arr[2], arr3, sizeof(arr3));
    memcpy(arr[3], arr4, sizeof(arr4));
}

// Function to print the data from the 2D array
void print_array_with_delay() {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 251; j++) {
            EUSART1_Write(arr[i][j]);
        }
        sleep(5);  // Delay for 5 seconds
    }
}

// Dummy implementation of EUSART1_Write for demonstration purposes
void EUSART1_Write(uint8_t txData) {
    // Replace this with your actual EUSART1_Write implementation
    printf("%02X ", txData);  // Print data in hex format
}

int main() {
    // Initialize the 2D array
    initialize_2D_array();

    // Print the array with delays
    print_array_with_delay();

    return 0;
}
